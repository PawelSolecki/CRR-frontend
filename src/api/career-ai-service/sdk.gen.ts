// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { GetData, GetHealthData, GetHealthResponses, GetResponses, PostApiV1CvAnalyzeCvData, PostApiV1CvAnalyzeCvErrors, PostApiV1CvAnalyzeCvResponses, PostApiV1CvGenerateBioData, PostApiV1CvGenerateBioErrors, PostApiV1CvGenerateBioResponses, PostApiV1OfferAnalyzeOfferData, PostApiV1OfferAnalyzeOfferErrors, PostApiV1OfferAnalyzeOfferResponses } from './types.gen';
import { zGetData, zGetHealthData, zGetHealthResponse, zGetResponse, zPostApiV1CvAnalyzeCvData, zPostApiV1CvAnalyzeCvResponse, zPostApiV1CvGenerateBioData, zPostApiV1CvGenerateBioResponse, zPostApiV1OfferAnalyzeOfferData, zPostApiV1OfferAnalyzeOfferResponse } from './zod.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Root endpoint
 */
export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetResponse.parseAsync(data);
        },
        url: '/',
        ...options
    });
};

/**
 * Health check
 */
export const getHealth = <ThrowOnError extends boolean = false>(options?: Options<GetHealthData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHealthResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetHealthData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetHealthResponse.parseAsync(data);
        },
        url: '/health',
        ...options
    });
};

/**
 * Analyze CV
 *
 * Analyzes a user's CV and enhances it with skill matching
 */
export const postApiV1CvAnalyzeCv = <ThrowOnError extends boolean = false>(options: Options<PostApiV1CvAnalyzeCvData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1CvAnalyzeCvResponses, PostApiV1CvAnalyzeCvErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostApiV1CvAnalyzeCvData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zPostApiV1CvAnalyzeCvResponse.parseAsync(data);
        },
        url: '/api/v1/cv/analyze-cv',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate bio
 *
 * Generates personalized bio based on CV, skills, and job offer
 */
export const postApiV1CvGenerateBio = <ThrowOnError extends boolean = false>(options: Options<PostApiV1CvGenerateBioData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1CvGenerateBioResponses, PostApiV1CvGenerateBioErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostApiV1CvGenerateBioData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zPostApiV1CvGenerateBioResponse.parseAsync(data);
        },
        url: '/api/v1/cv/generate-bio',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Analyze job offer
 *
 * Analyzes a job offer and extracts skill requirements
 */
export const postApiV1OfferAnalyzeOffer = <ThrowOnError extends boolean = false>(options: Options<PostApiV1OfferAnalyzeOfferData, ThrowOnError>) => {
    return (options.client ?? client).post<PostApiV1OfferAnalyzeOfferResponses, PostApiV1OfferAnalyzeOfferErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPostApiV1OfferAnalyzeOfferData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zPostApiV1OfferAnalyzeOfferResponse.parseAsync(data);
        },
        url: '/api/v1/offer/analyze-offer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};
