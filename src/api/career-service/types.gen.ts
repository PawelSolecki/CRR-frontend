// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://career-service:8081' | (string & {});
};

export type Certification = {
    name?: string;
    issuer?: string;
    date?: string;
};

export type Education = {
    school?: string;
    degree?: string;
    fieldOfStudy?: string;
    startDate?: string;
    endDate?: string;
};

export type Experience = {
    position?: string;
    company?: string;
    url?: string;
    location?: string;
    startDate?: string;
    endDate?: string;
    summaries?: Array<Summary>;
};

export type GeneratePdfRequest = {
    userCV: UserCv;
    template: string;
    language: 'EN' | 'PL';
};

export type Language = {
    language?: string;
    level?: 'A1' | 'A2' | 'B1' | 'B2' | 'C1' | 'C2';
};

export type PersonalInfo = {
    firstName: string;
    lastName: string;
    email?: string;
    phone?: string;
    role?: string;
    summary?: string;
    linkedIn?: string;
    github?: string;
    website?: string;
    other?: string;
};

export type Project = {
    name?: string;
    url?: string;
    summaries?: Array<Summary>;
};

export type Summary = {
    text?: string;
    technologies?: Array<string>;
};

export type UserCv = {
    personalInfo: PersonalInfo;
    skills?: Array<string>;
    experience?: Array<Experience>;
    education?: Array<Education>;
    languages?: Array<Language>;
    certifications?: Array<Certification>;
    projects?: Array<Project>;
};

export type ErrorResponse = {
    timestamp?: string;
    status?: number;
    error?: string;
    message?: string;
    details?: Array<string>;
};

export type PrepareCvRequest = {
    userCV: UserCv;
    skillResult: SkillResult;
};

export type SkillItem = {
    name?: string;
    score?: number;
};

export type SkillResult = {
    hardSkills?: Array<SkillItem>;
    softSkills?: Array<SkillItem>;
    tools?: Array<SkillItem>;
};

export type JobOffer = {
    url?: string;
    company?: string;
    title?: string;
    description?: string;
    technologies?: Array<string>;
    requirements?: Array<string>;
    responsibilities?: Array<string>;
};

export type GeneratePdfData = {
    body: GeneratePdfRequest;
    path?: never;
    query?: never;
    url: '/api/v1/pdf/generate';
};

export type GeneratePdfErrors = {
    /**
     * Bad Request - Invalid input parameters
     */
    400: ErrorResponse;
    /**
     * Resource not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GeneratePdfError = GeneratePdfErrors[keyof GeneratePdfErrors];

export type GeneratePdfResponses = {
    /**
     * PDF successfully generated. Returns a binary PDF file that can be downloaded.
     */
    200: unknown;
};

export type PrepareCvData = {
    /**
     * Data required to prepare the CV
     */
    body: PrepareCvRequest;
    path?: never;
    query?: {
        /**
         * Number of top skills to prioritize. Default is -1 (no limit).
         */
        topN?: unknown;
    };
    url: '/api/v1/cv/prepare';
};

export type PrepareCvErrors = {
    /**
     * Bad Request - Invalid input parameters
     */
    400: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type PrepareCvError = PrepareCvErrors[keyof PrepareCvErrors];

export type PrepareCvResponses = {
    /**
     * CV successfully prepared
     */
    200: UserCv;
};

export type PrepareCvResponse = PrepareCvResponses[keyof PrepareCvResponses];

export type ScrapeData = {
    body?: never;
    path?: never;
    query: {
        /**
         * URL of the job offer page
         */
        url: unknown;
    };
    url: '/api/v1/scrapper';
};

export type ScrapeErrors = {
    /**
     * Bad Request - Invalid input parameters
     */
    400: ErrorResponse;
    /**
     * Resource not found
     */
    404: ErrorResponse;
};

export type ScrapeError = ScrapeErrors[keyof ScrapeErrors];

export type ScrapeResponses = {
    /**
     * Job offer successfully scraped
     */
    200: JobOffer;
};

export type ScrapeResponse = ScrapeResponses[keyof ScrapeResponses];
