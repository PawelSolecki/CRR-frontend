// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as Options2, TDataShape } from './client';
import { client } from './client.gen';
import type { GeneratePdfData, GeneratePdfErrors, GeneratePdfResponses, PrepareCvData, PrepareCvErrors, PrepareCvResponses, ScrapeData, ScrapeErrors, ScrapeResponses } from './types.gen';
import { zGeneratePdfData, zPrepareCvData, zPrepareCvResponse, zScrapeData, zScrapeResponse } from './zod.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Generate PDF CV
 *
 * Generates a PDF CV from the provided data
 */
export const generatePdf = <ThrowOnError extends boolean = false>(options: Options<GeneratePdfData, ThrowOnError>) => {
    return (options.client ?? client).post<GeneratePdfResponses, GeneratePdfErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGeneratePdfData.parseAsync(data);
        },
        url: '/api/v1/pdf/generate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Prepare CV by enhancing skills based on job description
 *
 * Enhances the user's CV by analyzing the provided job description and adjusting the CV's skills accordingly.
 */
export const prepareCv = <ThrowOnError extends boolean = false>(options: Options<PrepareCvData, ThrowOnError>) => {
    return (options.client ?? client).post<PrepareCvResponses, PrepareCvErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zPrepareCvData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zPrepareCvResponse.parseAsync(data);
        },
        url: '/api/v1/cv/prepare',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Scrape job offer
 *
 * Scrapes job offer data from the given URL.
 */
export const scrape = <ThrowOnError extends boolean = false>(options: Options<ScrapeData, ThrowOnError>) => {
    return (options.client ?? client).get<ScrapeResponses, ScrapeErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zScrapeData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zScrapeResponse.parseAsync(data);
        },
        url: '/api/v1/scrapper',
        ...options
    });
};
